name: Distribute APP to Firebase

on:
  workflow_dispatch:
    inputs:
  
      choice:
        type: choice
        description: "Which job to run"
        options:
          - distribute-ipa
          - distribute-apk

jobs:
  build-ios-ipa:
    if: ${{ github.event.inputs.choice == 'distribute-ipa' }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |

          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Flutter get
        uses: subosito/flutter-action@v1
        with:
          flutter-version:
            "3.24.3"
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa
  release-ios:
    name: Release ipa to Firebase
    needs: build-ios-ipa
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-ipa

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
        # token: ${{secrets.FIREBASE_TOKEN}}
        serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
        groups: my_team
        file: pdp_ci_cd_app.ipa
     
  build-android-apk:
    if: ${{ github.event.inputs.choice == 'distribute-apk' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode Keystore from Base64
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/${{ secrets.KESTORE_FILE_PATH }}

      - name: Create keystore
        run: |
          echo "keyAliasRelease=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "keyPasswordRelease=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "storeFileRelease=${{ secrets.KESTORE_FILE_PATH }}" >> android/key.properties
          echo "storePasswordRelease=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
        # cat android/key.properties

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"

      - name: Verify Flutter Installation
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Bump Version in pubspec.yaml
        id: bump-version
        run: |
          CURRENT_VERSION=$(grep '^version: ' pubspec.yaml | awk '{print $2}')
          VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          VERSION_CODE=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          NEW_VERSION_CODE=$((VERSION_CODE + 1))
          NEW_VERSION_NAME="$VERSION_NAME"
          sed -i "s/^version: .*/version: $NEW_VERSION_NAME+$NEW_VERSION_CODE/" pubspec.yaml
          echo "Updated version to $NEW_VERSION_NAME+$NEW_VERSION_CODE"
          echo "version=$NEW_VERSION_NAME+$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Build APK
        run: flutter build apk --release
  release-android:
    name: Release apk to Firebase
    runs-on: ubuntu-latest
    needs:  build-android-apk
    steps:
      - name: Upload Artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.APPID }}
          # token: ${{ secrets.FIREBASE_TOKEN }}
          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
          groups: my_team
          file: build/app/outputs/flutter-apk/app-release.apk
          releaseNotes: "Release for branch ${{ github.ref }}\nVersion: ${{ steps.bump-version.outputs.version }}"

      # - name: Install Firebase CLI
      #   run: npm install -g firebase-tools

      # - name: Distribute APK
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      #   run: |
      #     firebase appdistribution:distribute build/app/outputs/flutter-apk/app-debug.apk \
      #     --app 1:981212150058:android:d7a644e30d78b0982ac653 \
      #     --release-notes "test_build" \
      #     --groups my_team
